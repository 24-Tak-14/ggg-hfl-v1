import React, { useState, useEffect } from 'react';
import { GoogleGenAI, Type } from '@google/genai';
import { TEAMS } from '../src/core/data/TeamData';
import { Team } from '../types';
import { Shield, Calendar, Newspaper, ArrowRight, Loader2, AlertTriangle } from 'lucide-react';

// Define the structure for the props, allowing navigation from the dashboard.
interface DashboardProps {
    setActiveView: (view: any) => void;
}

// The Dashboard component provides a central overview of the user's team and league happenings.
const DashboardView: React.FC<DashboardProps> = ({ setActiveView }) => {
    // Hardcode the user's team and their next opponent for this demonstration.
    const myTeam: Team = TEAMS.find(t => t.id === '1')!;
    const nextOpponent: Team = TEAMS.find(t => t.id === '22')!;

    // State for managing news headlines generated by the Gemini API.
    const [news, setNews] = useState<string[]>([]);
    const [isLoadingNews, setIsLoadingNews] = useState(true);
    const [newsError, setNewsError] = useState<string | null>(null);

    // Fetch dynamic news headlines when the component mounts.
    useEffect(() => {
        const fetchNews = async () => {
            try {
                const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
                const prompt = `You are a sports journalist for the Heart Football League (HFL). Generate 4 dramatic and exciting news headlines about the current state of the league. Mention specific team names like the 'Beloved Funnel Chug' or the 'San Terrell Blackouts'. Keep headlines short, punchy, and under 15 words.`;

                const response = await ai.models.generateContent({
                    model: 'gemini-2.5-flash',
                    contents: prompt,
                    config: {
                        responseMimeType: 'application/json',
                        responseSchema: {
                            type: Type.OBJECT,
                            properties: {
                                headlines: {
                                    type: Type.ARRAY,
                                    description: "A list of 4 short, punchy news headlines.",
                                    items: { type: Type.STRING },
                                }
                            },
                            required: ['headlines'],
                        },
                    },
                });

                const content = JSON.parse(response.text);
                setNews(content.headlines);
            } catch (e) {
                console.error("Failed to fetch league news:", e);
                setNewsError("Could not fetch the latest league buzz.");
            } finally {
                setIsLoadingNews(false);
            }
        };

        fetchNews();
    }, []);

    // A reusable card component for the dashboard layout.
    const InfoCard: React.FC<{ icon: React.ElementType, title: string, children: React.ReactNode }> = ({ icon: Icon, title, children }) => (
        <div className="bg-stone-800/50 p-6 rounded-lg ring-1 ring-stone-700 h-full">
            <h2 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                <Icon className="w-6 h-6 text-amber-400" />
                {title}
            </h2>
            {children}
        </div>
    );

    return (
        <div>
            <h1 className="text-3xl sm:text-4xl font-bold text-amber-400 mb-2">Dashboard</h1>
            <p className="text-stone-400 mb-6">Your central command for the {myTeam.name}.</p>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {/* Team Summary Card */}
                <div className="lg:col-span-1">
                    <InfoCard icon={Shield} title="Team Summary">
                        <div className="space-y-3">
                            <h3 className="text-2xl font-bold text-white">{myTeam.city} {myTeam.name}</h3>
                            <p className="text-lg text-stone-300">Record: <span className="font-bold text-white">{myTeam.wins}-{myTeam.losses}-{myTeam.ties}</span></p>
                            <p className="text-sm text-stone-400">{myTeam.conference} Conference / {myTeam.division} Division</p>
                            <button onClick={() => setActiveView('team')} className="w-full mt-4 bg-stone-700 text-white font-semibold py-2 px-4 rounded-md hover:bg-stone-600 transition-colors text-sm flex items-center justify-center gap-2">
                                View Roster <ArrowRight className="w-4 h-4" />
                            </button>
                        </div>
                    </InfoCard>
                </div>

                {/* Next Matchup Card */}
                <div className="lg:col-span-1">
                     <InfoCard icon={Calendar} title="Next Matchup">
                        <div className="flex items-center justify-around text-center">
                            <div>
                                <p className="font-bold text-lg text-white">{myTeam.name}</p>
                                <p className="text-sm text-stone-400">({myTeam.wins}-{myTeam.losses})</p>
                            </div>
                            <span className="text-2xl font-bold text-amber-400">VS</span>
                             <div>
                                <p className="font-bold text-lg text-white">{nextOpponent.name}</p>
                                <p className="text-sm text-stone-400">({nextOpponent.wins}-{nextOpponent.losses})</p>
                            </div>
                        </div>
                        <button onClick={() => setActiveView('game')} className="w-full mt-4 bg-amber-400 text-stone-900 font-bold py-2 px-4 rounded-md hover:bg-amber-300 transition-colors flex items-center justify-center gap-2">
                                Go to Game Sim <ArrowRight className="w-4 h-4" />
                        </button>
                    </InfoCard>
                </div>

                {/* League News Card */}
                <div className="lg:col-span-1">
                    <InfoCard icon={Newspaper} title="League News">
                        {isLoadingNews ? (
                            <div className="flex items-center justify-center h-full text-stone-400">
                                <Loader2 className="w-6 h-6 animate-spin" />
                            </div>
                        ) : newsError ? (
                            <div className="flex items-center gap-2 text-red-400">
                                <AlertTriangle className="w-5 h-5" />
                                <p>{newsError}</p>
                            </div>
                        ) : (
                            <ul className="space-y-3">
                                {news.map((headline, index) => (
                                    <li key={index} className="text-stone-300 text-sm border-l-2 border-stone-600 pl-3 leading-tight">{headline}</li>
                                ))}
                            </ul>
                        )}
                    </InfoCard>
                </div>
            </div>
        </div>
    );
};

export default DashboardView;